#!/usr/bin/env bash

# ensure the required directory structure exists (~/bin, ~/.config)
# create symbolic links from config files in repo to our directory
# clone the config files from the repo 
# manage the existing files by skipping or overwriting

# use mkdir with -p to create the directory if it doesn't exist. -p stands for parents and it creates a directory and any necessary parent directories that do not exist. This helps us create nested directories in one command
mkdir -p ~/bin
mkdir -p ~/.config/kak
mkdir -p ~/.config/tmux

# cloning the repo files into a directory called config_repo
repo_link="https://gitlab.com/cit2420/2420-as2-starting-files.git"
git clone "$repo_link" config_repo

# check if the cloning is successful by seeing if the exit code is equal to 0
if [[ $? -eq 0 ]]; then
  echo "Git cloning has been successful"
  # create symlink function if the cloning is successful
  create_symlink() {
    path_to_folder=$1
    symlink_location=$2

    # source = https://www.gnu.org/software/bash/manual/bash.html
    # the -L checks if the file exists and is a symbolic link, so we check if our_location is a symbolic link
    if [[ -L "$1" ]]; then
      echo "Symbolic link $1 already exists"
    else
      # if the symlink doesnt exist, we take in the two paths from the arguments and we create the symlink
      # ln is the command used to create links, and we specify a softlink with -s
      ln -s "$path_to_folder" "$symlink_location"
      echo "Created symlink for $path_to_folder"
    fi

  }
  # create all the symlinks using our symlink function
  create_symlink ~/config_repo/bin/sayhi ~/bin/sayhi
  create_symlink ~/config_repo/bin/install-fonts ~/bin/install-fonts
  create_symlink ~/config_repo/config/kak/kakrc ~/.config/kak/kakrc
  create_symlink ~/config_repo/config/tmux/tmux.conf ~/.config/tmux/tmux.conf
  create_symlink ~/config_repo/home/bashrc ~/.bashrc

# if cloning isnt successful, we give them an error
else
  echo "Error while cloning from repo"
fi


